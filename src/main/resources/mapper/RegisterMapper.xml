<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.keepingthepiggy.dao.RegisterMapper" >
  <resultMap id="BaseResultMap" type="cn.keepingthepiggy.dataModel.Register" >
    <result column="urzid" property="urzid" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="pazword" property="pazword" jdbcType="VARCHAR" />
    <result column="position" property="position" jdbcType="INTEGER" />
    <result column="permission" property="permission" jdbcType="INTEGER" />
    <result column="register_state" property="registerState" jdbcType="INTEGER" />
    <result column="register_way" property="registerWay" jdbcType="INTEGER" />
    <result column="register_equipment" property="registerEquipment" jdbcType="VARCHAR" />
    <result column="last_request_time" property="lastRequestTime" jdbcType="TIMESTAMP" />
    <result column="logout_way" property="logoutWay" jdbcType="INTEGER" />
    <result column="inner_token" property="innerToken" jdbcType="VARCHAR" />
    <result column="get_intoken_time" property="getIntokenTime" jdbcType="TIMESTAMP" />
    <result column="external_token" property="externalToken" jdbcType="VARCHAR" />
    <result column="get_extoken_time" property="getExtokenTime" jdbcType="TIMESTAMP" />
    <result column="register_time" property="registerTime" jdbcType="TIMESTAMP" />
    <result column="upd_acct_count" property="updAcctCount" jdbcType="INTEGER" />
    <result column="upd_acct_time" property="updAcctTime" jdbcType="TIMESTAMP" />
    <result column="upd_paz_time" property="updPazTime" jdbcType="TIMESTAMP" />
    <result column="login_ip" property="loginIp" jdbcType="VARCHAR" />
    <result column="account_state" property="accountState" jdbcType="INTEGER" />
    <result column="delete" property="delete" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    urzid, account, pazword, position, permission, register_state, register_way, register_equipment, 
    last_request_time, logout_way, inner_token, get_intoken_time, external_token, get_extoken_time, 
    register_time, upd_acct_count, upd_acct_time, upd_paz_time, login_ip, account_state, 
    delete
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.keepingthepiggy.dataModel.RegisterExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from register
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="cn.keepingthepiggy.dataModel.RegisterExample" >
    delete from register
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.keepingthepiggy.dataModel.Register" >
    insert into register (urzid, account, pazword, 
      position, permission, register_state, 
      register_way, register_equipment, last_request_time, 
      logout_way, inner_token, get_intoken_time, 
      external_token, get_extoken_time, register_time, 
      upd_acct_count, upd_acct_time, upd_paz_time, 
      login_ip, account_state, delete
      )
    values (#{urzid,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, #{pazword,jdbcType=VARCHAR}, 
      #{position,jdbcType=INTEGER}, #{permission,jdbcType=INTEGER}, #{registerState,jdbcType=INTEGER}, 
      #{registerWay,jdbcType=INTEGER}, #{registerEquipment,jdbcType=VARCHAR}, #{lastRequestTime,jdbcType=TIMESTAMP}, 
      #{logoutWay,jdbcType=INTEGER}, #{innerToken,jdbcType=VARCHAR}, #{getIntokenTime,jdbcType=TIMESTAMP}, 
      #{externalToken,jdbcType=VARCHAR}, #{getExtokenTime,jdbcType=TIMESTAMP}, #{registerTime,jdbcType=TIMESTAMP}, 
      #{updAcctCount,jdbcType=INTEGER}, #{updAcctTime,jdbcType=TIMESTAMP}, #{updPazTime,jdbcType=TIMESTAMP}, 
      #{loginIp,jdbcType=VARCHAR}, #{accountState,jdbcType=INTEGER}, #{delete,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.keepingthepiggy.dataModel.Register" >
    insert into register
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="urzid != null" >
        urzid,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="pazword != null" >
        pazword,
      </if>
      <if test="position != null" >
        position,
      </if>
      <if test="permission != null" >
        permission,
      </if>
      <if test="registerState != null" >
        register_state,
      </if>
      <if test="registerWay != null" >
        register_way,
      </if>
      <if test="registerEquipment != null" >
        register_equipment,
      </if>
      <if test="lastRequestTime != null" >
        last_request_time,
      </if>
      <if test="logoutWay != null" >
        logout_way,
      </if>
      <if test="innerToken != null" >
        inner_token,
      </if>
      <if test="getIntokenTime != null" >
        get_intoken_time,
      </if>
      <if test="externalToken != null" >
        external_token,
      </if>
      <if test="getExtokenTime != null" >
        get_extoken_time,
      </if>
      <if test="registerTime != null" >
        register_time,
      </if>
      <if test="updAcctCount != null" >
        upd_acct_count,
      </if>
      <if test="updAcctTime != null" >
        upd_acct_time,
      </if>
      <if test="updPazTime != null" >
        upd_paz_time,
      </if>
      <if test="loginIp != null" >
        login_ip,
      </if>
      <if test="accountState != null" >
        account_state,
      </if>
      <if test="delete != null" >
        delete,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="urzid != null" >
        #{urzid,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="pazword != null" >
        #{pazword,jdbcType=VARCHAR},
      </if>
      <if test="position != null" >
        #{position,jdbcType=INTEGER},
      </if>
      <if test="permission != null" >
        #{permission,jdbcType=INTEGER},
      </if>
      <if test="registerState != null" >
        #{registerState,jdbcType=INTEGER},
      </if>
      <if test="registerWay != null" >
        #{registerWay,jdbcType=INTEGER},
      </if>
      <if test="registerEquipment != null" >
        #{registerEquipment,jdbcType=VARCHAR},
      </if>
      <if test="lastRequestTime != null" >
        #{lastRequestTime,jdbcType=TIMESTAMP},
      </if>
      <if test="logoutWay != null" >
        #{logoutWay,jdbcType=INTEGER},
      </if>
      <if test="innerToken != null" >
        #{innerToken,jdbcType=VARCHAR},
      </if>
      <if test="getIntokenTime != null" >
        #{getIntokenTime,jdbcType=TIMESTAMP},
      </if>
      <if test="externalToken != null" >
        #{externalToken,jdbcType=VARCHAR},
      </if>
      <if test="getExtokenTime != null" >
        #{getExtokenTime,jdbcType=TIMESTAMP},
      </if>
      <if test="registerTime != null" >
        #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updAcctCount != null" >
        #{updAcctCount,jdbcType=INTEGER},
      </if>
      <if test="updAcctTime != null" >
        #{updAcctTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updPazTime != null" >
        #{updPazTime,jdbcType=TIMESTAMP},
      </if>
      <if test="loginIp != null" >
        #{loginIp,jdbcType=VARCHAR},
      </if>
      <if test="accountState != null" >
        #{accountState,jdbcType=INTEGER},
      </if>
      <if test="delete != null" >
        #{delete,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.keepingthepiggy.dataModel.RegisterExample" resultType="java.lang.Integer" >
    select count(*) from register
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update register
    <set >
      <if test="record.urzid != null" >
        urzid = #{record.urzid,jdbcType=INTEGER},
      </if>
      <if test="record.account != null" >
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.pazword != null" >
        pazword = #{record.pazword,jdbcType=VARCHAR},
      </if>
      <if test="record.position != null" >
        position = #{record.position,jdbcType=INTEGER},
      </if>
      <if test="record.permission != null" >
        permission = #{record.permission,jdbcType=INTEGER},
      </if>
      <if test="record.registerState != null" >
        register_state = #{record.registerState,jdbcType=INTEGER},
      </if>
      <if test="record.registerWay != null" >
        register_way = #{record.registerWay,jdbcType=INTEGER},
      </if>
      <if test="record.registerEquipment != null" >
        register_equipment = #{record.registerEquipment,jdbcType=VARCHAR},
      </if>
      <if test="record.lastRequestTime != null" >
        last_request_time = #{record.lastRequestTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.logoutWay != null" >
        logout_way = #{record.logoutWay,jdbcType=INTEGER},
      </if>
      <if test="record.innerToken != null" >
        inner_token = #{record.innerToken,jdbcType=VARCHAR},
      </if>
      <if test="record.getIntokenTime != null" >
        get_intoken_time = #{record.getIntokenTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.externalToken != null" >
        external_token = #{record.externalToken,jdbcType=VARCHAR},
      </if>
      <if test="record.getExtokenTime != null" >
        get_extoken_time = #{record.getExtokenTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.registerTime != null" >
        register_time = #{record.registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updAcctCount != null" >
        upd_acct_count = #{record.updAcctCount,jdbcType=INTEGER},
      </if>
      <if test="record.updAcctTime != null" >
        upd_acct_time = #{record.updAcctTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updPazTime != null" >
        upd_paz_time = #{record.updPazTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.loginIp != null" >
        login_ip = #{record.loginIp,jdbcType=VARCHAR},
      </if>
      <if test="record.accountState != null" >
        account_state = #{record.accountState,jdbcType=INTEGER},
      </if>
      <if test="record.delete != null" >
        delete = #{record.delete,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update register
    set urzid = #{record.urzid,jdbcType=INTEGER},
      account = #{record.account,jdbcType=VARCHAR},
      pazword = #{record.pazword,jdbcType=VARCHAR},
      position = #{record.position,jdbcType=INTEGER},
      permission = #{record.permission,jdbcType=INTEGER},
      register_state = #{record.registerState,jdbcType=INTEGER},
      register_way = #{record.registerWay,jdbcType=INTEGER},
      register_equipment = #{record.registerEquipment,jdbcType=VARCHAR},
      last_request_time = #{record.lastRequestTime,jdbcType=TIMESTAMP},
      logout_way = #{record.logoutWay,jdbcType=INTEGER},
      inner_token = #{record.innerToken,jdbcType=VARCHAR},
      get_intoken_time = #{record.getIntokenTime,jdbcType=TIMESTAMP},
      external_token = #{record.externalToken,jdbcType=VARCHAR},
      get_extoken_time = #{record.getExtokenTime,jdbcType=TIMESTAMP},
      register_time = #{record.registerTime,jdbcType=TIMESTAMP},
      upd_acct_count = #{record.updAcctCount,jdbcType=INTEGER},
      upd_acct_time = #{record.updAcctTime,jdbcType=TIMESTAMP},
      upd_paz_time = #{record.updPazTime,jdbcType=TIMESTAMP},
      login_ip = #{record.loginIp,jdbcType=VARCHAR},
      account_state = #{record.accountState,jdbcType=INTEGER},
      delete = #{record.delete,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>